1、克隆仓库        git clone "SSH"

2、添加到本地仓库        git add "文件名"

3、提交        git commit -m "描述"

4、将本地主分支推到远程主分支     git push origin master

5、添加远程仓库 git remote add origin "远程url"

6、删除远程仓库：git remote rm origin

7、撤销暂存区的文件：git reset HEAD file

8、查看远程仓库信息：git remote -v

################ 分支相关  ####################

1、创建一个分支  git branch "分支名"

2、切换到某个分支   git checkout "分支名"            主分支 master

3、创建分支并切换分支    git checkout -b dev

4、查看当前所有分支(当前分支前面会有一个*号)     git branch

5、将某个分支上合并到当前分支  git merge "分支名"

6、删除某个分支   git branch -d dev

7、查看远程分支  git branch -r

8、创建远程分支  git push origin "分支名"

9、删除远程分支 git push origin --delete "远程分支名"

10、查看所有分支(本地和远程) git branch -a

################ 提交相关  ####################

1、提交本地分支到远程分支  git push origin "本地分支名"："远程分支名"

2、查看未提交的commit文件 git log "分支名" ^origin/"远程分支名"

3、合并多个commit，已经push； git rebase -i HEAD~2 -> 修改 ―> 保存  -> git rebase --continue 
   -> git push -f -> git rebase origin/master

  中止：git rebase --abort

################ 修复相关  ####################

1、恢复 git reset --hard  -->  git reflog  git reset --hard "xx"

2、未push之前，撤销commit区提交  git reset --soft "上一个log编号 xx"

################ 编辑相关  ####################

Esc 退出编辑模式，输入以下命令：

:wq  保存后退出vi，若为 :wq! 则为强制储存后退出（常用）

:w    保存但不退出（常用）

:w!   若文件属性为『只读』时，强制写入该档案

:q    离开 vi （常用）

:q!   若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。

:e!   将档案还原到最原始的状态！



################ MINGW64 命令 ######################

1、打开某个目录    cd d:\\abc

2、回退到上个目录   cd ..

3、列出当前目录中的所有文件   ls:list

4、新建文件夹   mkdir 文件夹名

5、删除文件夹   rm -r 文件夹名  (先删除文件里面的文件，从里到外，使用到递归删除)

6、reset 清屏

7、回到根目录 cd /









